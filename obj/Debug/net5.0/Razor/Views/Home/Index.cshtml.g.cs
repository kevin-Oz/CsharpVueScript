#pragma checksum "/home/lord/dotnet/csharpVue/Views/Home/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1ede4ba5aa38fa03c1e3d33cd92df60915ffc6fa"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/home/lord/dotnet/csharpVue/Views/_ViewImports.cshtml"
using csharpVue;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/home/lord/dotnet/csharpVue/Views/_ViewImports.cshtml"
using csharpVue.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1ede4ba5aa38fa03c1e3d33cd92df60915ffc6fa", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"561d23bfec78ae751aadd770a4b14cb7bf266a64", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("taskform"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "/home/lord/dotnet/csharpVue/Views/Home/Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
  <script src=""https://unpkg.com/axios/dist/axios.min.js""></script>

  <script >
  
  const app = Vue.createApp(
         {
            name: ""TaskComponent"",
            data() {
              return {
                task: {
                  name: """" ,
                  status: false 
                },
                listtasks: [],
                loading: false,
              };
            },
            methods: {
              addTask(){
                const task = {
                  name: this.task.name,
                  status: this.task.status,
                };
                this.loading = true;
                axios
                  .post(""https://localhost:5001/api/Task/"", task)
                  .then((response) => {
                    console.log(response);
                    this.loading = false;
                    this.getTasks();
                  })
                  .catch((error) => {
                    console.error(error);
                ");
                WriteLiteral(@"    this.loading = false;
                  });
                this.task.name = """";
              },
          
              deleteTask(id) {
                this.loading = true;
                axios
                  .delete(""https://localhost:5001/api/Task/"" + id)
                  .then((response) => {
                    console.log(response);
                    this.getTasks();
                    this.loading = false;
                  })
                  .catch((error) => {
                    console.log(error);
                    this.loading = false;
                  });
              },
              updateTask(task, id){
                this.loading = true;
                axios
                  .put(""https://localhost:5001/api/Task/"" + id, task)
                  .then(() => {
                    this.getTasks();
                    this.loading = false;
                  })
                  .catch(() => (this.loading = false));
              },
             ");
                WriteLiteral(@" getTasks() {
                this.loading = true;
                axios
                  .get(""https://localhost:5001/api/Task"")
                  .then((response) => {
                    console.log(response);
                    this.listtasks = response.data;
                    this.loading = false;
                  })
                  .catch(() => (this.loading = false));
              },
            },
            created() {
              this.getTasks();
            },
          }
         
         
         );
          
          
app.mount('#app');
  
  </script>
");
            }
            );
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Welcome</h1>
    <p>Learn about <a href=""https://docs.microsoft.com/aspnet/core"">building Web apps with ASP.NET Core</a>.</p>
</div>

  <div id=""app"">
    <div>
      <h1 class=""display-4 text-center"">List of tasks</h1>
      <hr />
      <div class=""row"">
        <div class=""col-lg-8 offset-lg-2"">
          <div class=""card mt-4"">
            <div class=""card-body"">
              <div class=""input-group"">
                <input
                  type=""text""
                  v-model=""task.name""
                  class=""form-control form-control-lg""
                  placeholder=""new task ""
                />
                <div class=""input-group-append"">
                  <button
                    v-on:click=""addTask(task)""
                    class=""btn btn-success btn-lg""
                  >
                    Add
                  </button>
                </div>
              </div>
              <br />
             ");
            WriteLiteral(@" <div class=""text-center"">
                <div
                  v-if=""loading""
                  class=""spinner-border text-success""
                  role=""status""
                ></div>
              </div>

              <h5 v-if=""listtasks.length == 0"">You dont have any task</h5>
              <ul v-if=""!loading"" class=""list-group"">
                <li
                  v-for=""(task, index) of listtasks""
                  :key=""index""
                  class=""list-group-item d-flex justify-content-between""
                >
                  <button
                    type=""button""
                    class=""btn btn-primary""
                    data-bs-toggle=""modal""
                    :data-bs-target=""'#staticBackdrop' + task.id""
                  >
                    update
                  </button>
                  {{ task.name }}
                  <button
                    class=""btn btn-danger""
                    v-on:click=""deleteTask(task.id)""
                ");
            WriteLiteral(@"  >
                    Delete
                  </button>

                  <!-- start modal -->
                  <div
                    class=""modal fade""
                    :id=""'staticBackdrop' + task.id""
                    data-bs-backdrop=""static""
                    data-bs-keyboard=""false""
                    tabindex=""-1""
                    aria-labelledby=""staticBackdropLabel""
                    aria-hidden=""true""
                  >
                    <div class=""modal-dialog"">
                      <div class=""modal-content"">
                        <div class=""modal-body"">
                          ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1ede4ba5aa38fa03c1e3d33cd92df60915ffc6fa9316", async() => {
                WriteLiteral(@"
                            <div class=""mb-3"">
                              <label for=""exampleInputEmail1"" class=""form-label""
                                >Task</label
                              >
                              <input
                                class=""form-control""
                                id=""exampleInputEmail1""
                                v-model=""task.name""
                              />
                              <div id=""emailHelp"" class=""form-text"">
                                Change this task
                              </div>
                            </div>
                          ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </div>
                        <div class=""modal-footer"">
                          <button
                            type=""button""
                            class=""btn btn-secondary""
                            data-bs-dismiss=""modal""
                          >
                            Close
                          </button>
                          <button
                            type=""submit""
                            v-bind:class=""{ 'text-success': task.status }""
                            v-on:click=""updateTask(task, task.id)""
                            class=""btn btn-primary""
                            data-bs-dismiss=""modal""
                          >
                            save
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                  <!-- end modal -->
                </li>
              </ul>
            </div>
     ");
            WriteLiteral("     </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
